diff --git a/src/Client.c b/src/Client.c
index 81480c2..f2c06f1 100644
--- a/src/Client.c
+++ b/src/Client.c
@@ -46,6 +46,10 @@ void MI_CALL Command_CreateInstance( Command_Self* self, MI_Context* context, co
 void MI_CALL Command_ModifyInstance( Command_Self* self, MI_Context* context, const MI_Char* nameSpace, const MI_Char* className, const Command* modifiedInstance, const MI_PropertySet* propertySet){}
 void MI_CALL Command_DeleteInstance( Command_Self* self, MI_Context* context, const MI_Char* nameSpace, const MI_Char* className, const Command* instanceName){}
 
+// Need to check if PowerShell will not require the -SkipCACheck and -SkipCNCheck options. We know this is the case if
+// WSManGetSessionOptionAsDword is called for CA/CN check as PowerShell never got those option values before it
+// supported cert validation.
+int PWSH_SUPPORTS_CERT_VALIDATION = 0;
 
 /* Note: Change logging level in omiserver.conf */
 #define SHELL_LOGGING_FILE "shellclient"
@@ -576,6 +580,73 @@ MI_EXPORT MI_Uint32 WINAPI WSManSetSessionOption(
             }
             miResult = MI_RESULT_OK;
             break;
+        case WSMAN_OPTION_SKIP_CA_CHECK:
+            __LOGD(("WSMAN_OPTION_SKIP_CA_CHECK=%u", data->number));
+
+            // If PWSH_SUPPORTS_CERT_VALIDATION == 0 at this point then pwsh has not checked if validation is done and
+            // thus required the -SkipCACheck and -SkipCNCheck options. We don't want to pass those along to OMI so
+            // cert validation actually happens. If end users want to disable validation then they should use the env
+            // vars instead. This should be removed at some future point.
+            if (PWSH_SUPPORTS_CERT_VALIDATION == 0)
+            {
+                __LOGD(("pwsh enforces cert checks, ignoring option %u", option));
+                miResult = MI_RESULT_OK;
+            }
+            else if (data->type == WSMAN_DATA_TYPE_DWORD)
+            {
+                if (data->number)
+                {
+                    if (MI_DestinationOptions_SetCertCACheck(&session->destinationOptions, MI_FALSE) != MI_RESULT_OK)
+                    {
+                        GOTO_ERROR("Failed to turn certificate CA check off", MI_RESULT_SERVER_LIMITS_EXCEEDED);
+                    }
+                }
+                else
+                {
+                    if (MI_DestinationOptions_SetCertCACheck(&session->destinationOptions, MI_TRUE) != MI_RESULT_OK)
+                    {
+                        GOTO_ERROR("Failed to turn certificate CA check on", MI_RESULT_SERVER_LIMITS_EXCEEDED);
+                    }
+                }
+            }
+            else
+            {
+                GOTO_ERROR("Failed to set CA check, invalid parameter", MI_RESULT_INVALID_PARAMETER);
+            }
+            miResult = MI_RESULT_OK;
+            break;
+        case WSMAN_OPTION_SKIP_CN_CHECK:
+            __LOGD(("WSMAN_OPTION_SKIP_CN_CHECK=%u", data->number));
+
+            // See WSMAN_OPTION_SKIP_CA_CHECK for more details
+            if (PWSH_SUPPORTS_CERT_VALIDATION == 0)
+            {
+                __LOGD(("pwsh enforces cert checks, ignoring option %u", option));
+                miResult = MI_RESULT_OK;
+            }
+            else if (data->type == WSMAN_DATA_TYPE_DWORD)
+            {
+                if (data->number)
+                {
+                    if (MI_DestinationOptions_SetCertCNCheck(&session->destinationOptions, MI_FALSE) != MI_RESULT_OK)
+                    {
+                        GOTO_ERROR("Failed to turn certificate CN check off", MI_RESULT_SERVER_LIMITS_EXCEEDED);
+                    }
+                }
+                else
+                {
+                    if (MI_DestinationOptions_SetCertCNCheck(&session->destinationOptions, MI_TRUE) != MI_RESULT_OK)
+                    {
+                        GOTO_ERROR("Failed to turn certificate CN check on", MI_RESULT_SERVER_LIMITS_EXCEEDED);
+                    }
+                }
+            }
+            else
+            {
+                GOTO_ERROR("Failed to set CN check, invalid parameter", MI_RESULT_INVALID_PARAMETER);
+            }
+            miResult = MI_RESULT_OK;
+            break;
         default:
             __LOGD(("ignored option %u", option));
             miResult = MI_RESULT_OK;    /* Assume we can ignore it */
@@ -592,6 +663,7 @@ MI_EXPORT MI_Uint32 WINAPI WSManGetSessionOptionAsDword(
     _Inout_ MI_Uint32 *value)
 {
     MI_Uint32 miResult = MI_RESULT_OK;
+    MI_Boolean check = MI_FALSE;
 
     LogFunctionStart("WSManGetSessionOptionAsDword");
     switch (option)
@@ -606,6 +678,49 @@ MI_EXPORT MI_Uint32 WINAPI WSManGetSessionOptionAsDword(
             __LOGD(("WSMAN_OPTION_SHELL_MAX_DATA_SIZE_PER_MESSAGE_KB returning 60"));
             break;
 
+        case WSMAN_OPTION_SKIP_CA_CHECK:
+            // If PowerShell calls this then we know it won't mandate the cert skip checks.
+            PWSH_SUPPORTS_CERT_VALIDATION = 1;
+            miResult = MI_DestinationOptions_GetCertCACheck(&session->destinationOptions, &check);
+
+            // If SetCertCACheck has not been called then the property is not set, treat as the flag is not set.
+            if (miResult == MI_RESULT_NO_SUCH_PROPERTY)
+            {
+                *value = 0;
+                miResult = MI_RESULT_OK;
+            }
+            else if (miResult == MI_RESULT_OK)
+            {
+                // GetCertCACheck checks if validation is enabled, we want the inverse for this option.
+                if (check)
+                    *value = 0;
+                else
+                    *value = 1;
+                __LOGD(("WSMAN_OPTION_SKIP_CA_CHECK returning %u", value));
+            }
+            break;
+
+        case WSMAN_OPTION_SKIP_CN_CHECK:
+            PWSH_SUPPORTS_CERT_VALIDATION = 1;
+            miResult = MI_DestinationOptions_GetCertCNCheck(&session->destinationOptions, &check);
+
+            // If SetCertCNCheck has not been called then the property is not set, treat as the flag is not set.
+            if (miResult == MI_RESULT_NO_SUCH_PROPERTY)
+            {
+                *value = 0;
+                miResult = MI_RESULT_OK;
+            }
+            else if (miResult == MI_RESULT_OK)
+            {
+                // GetCertCNCheck checks if validation is enabled, we want the inverse for this option.
+                if (check)
+                    *value = 0;
+                else
+                    *value = 1;
+                __LOGD(("WSMAN_OPTION_SKIP_CA_CHECK returning %u", value));
+            }
+            break;
+
         default:
             miResult = MI_RESULT_NOT_SUPPORTED;
             __LOGD(("unknown option %u", option));
