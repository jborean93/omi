trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - LICENSE
    - README.md

stages:
- stage: Build
  jobs:

  - job: Linux
    pool:
      vmImage: ubuntu-18.04
    strategy:
      matrix:
        glibc-1.0:
          distribution: glibc-1.0
        glibc-1.1:
          distribution: glibc-1.1
        glibc-3:
          distribution: glibc-3
        musl-1.1:
          distribution: musl-1.1
        musl-3:
          distribution: musl-3

    steps:
    - script: ./build.py $(distribution) --docker
      env:
        OMI_BUILDVERSION_BUILDNR: $(Build.BuildId)
      displayName: Build

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: PSWSMan/lib/$(distribution)/
        artifactName: $(distribution)
      displayName: Publish artifacts

  - job: macOS
    pool:
      vmImage: macOS-10.15
    strategy:
      matrix:
        macOS-1.1:
          distribution: macOS-1.1
        macOS-3:
          distribution: macOS-3

    steps:
    - script: ./build.py $(distribution)
      env:
        OMI_BUILDVERSION_BUILDNR: $(Build.BuildId)
        SDKROOT: macosx11.1  # Required to build aarch64 libraries on AZP.
      displayName: Build

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: PSWSMan/lib/$(distribution)/
        artifactName: $(distribution)
      displayName: Publish artifacts

- stage: Test
  jobs:

  - job: Linux
    pool:
      vmImage: ubuntu-18.04
    strategy:
      matrix:
        CentOS7:
          distribution: centos7
        CentOS8:
          distribution: centos8
        Debian9:
          distribution: debian9
        Debian10:
          distribution: debian10
        Fedora32:
          distribution: fedora32
        Fedora33:
          distribution: fedora33
        Ubuntu16.04:
          distribution: ubuntu16.04
        Ubuntu18.04:
          distribution: ubuntu18.04
        Ubuntu20.04:
          distribution: ubuntu20.04
        Archlinux:
          distribution: archlinux
        Alpine3:
          distribution: alpine3

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        path: PSWSMan/lib

    - pwsh: |
        $version = (Import-Module -Name ./PSWSMan -PassThru).Version.ToString(3) + ".$(Build.BuildId)"
        Write-Host "##vso[task.setvariable variable=BuildVersion]${version}"
      displayName: Get module version

    - script: ./test.py $(distribution) --docker --verify-version $(BuildVersion)
      displayName: Check compiled libraries are loadable and are set to the correct version

  - job: macOS
    pool:
      vmImage: macOS-10.15

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        path: PSWSMan/lib

    - pwsh: |
        $version = (Import-Module -Name ./PSWSMan -PassThru).Version.ToString(3) + ".$(Build.BuildId)"
        Write-Host "##vso[task.setvariable variable=BuildVersion]${version}"
      displayName: Get module version

    - script: ./test.py macOS-1.1 --verify-version $(BuildVersion)
      displayName: Check compiled libraries are loadable and are set to the correct version

- stage: Publish
  jobs:
  - job: Publish
    pool:
      vmImage: ubuntu-18.04

    steps:
    - script: |
        RELEASE_TAG="$( ./release.py --print-tag )"
        echo "Derived release tag is ${RELEASE_TAG}"
        echo "##vso[task.setvariable variable=ReleaseTag]${RELEASE_TAG}"
      displayName: Generate the tag number from omi.version

    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        path: PSWSMan/lib

    - script: sed -i '/Prerelease =/d' PSWSMan/PSWSMan.psd1
      displayName: Remove prerelease data in psd1 manifest for final release
      condition: >-
        and(
          succeeded(),
          eq(variables['Build.Reason'], 'IndividualCI'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceVersionMessage'], 'release ')
        )

    - script: ./release.py --output-dir "$(Build.ArtifactStagingDirectory)"
      displayName: Create artifacts to publish for GitHub and PowerShell Gallery

    - script: |
        NUPKG_PATH="$( ls $(Build.ArtifactStagingDirectory)/PSWSMan*.nupkg )"
        echo "Found PSWSman nupkg at '${NUPKG_PATH}'"
        echo "##vso[task.setvariable variable=NupkgPath]${NUPKG_PATH}"
      displayName: Get full path to published nupkg

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: $(NupkgPath)
        artifactName: PSWSMan
      displayName: Publish PSWSMan nupkg

    - task: NuGetCommand@2
      inputs:
        command: push
        packagesToPush: $(Build.ArtifactStagingDirectory)/*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: PowerShell Gallery
      displayName: Publish PSWSMan to PSGallery
      condition: >-
        and(
          succeeded(),
          eq(variables['Build.Reason'], 'IndividualCI'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceVersionMessage'], 'release ')
        )

    - task: GitHubRelease@0
      inputs:
        gitHubConnection: GitHub Release
        repositoryName: $(Build.Repository.Name)
        action: create
        target: $(Build.SourceVersion)
        tagSource: manual
        tag: $(ReleaseTag)
        assets: $(Build.ArtifactStagingDirectory)/*
        addChangeLog: true
        compareWith: lastFullRelease
      condition: >-
        and(
          succeeded(),
          eq(variables['Build.Reason'], 'IndividualCI'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceVersionMessage'], 'release ')
        )
