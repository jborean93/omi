# Setups up a domain controller and test Debian host for testing distros in a docker container
# Can be run with `-e build_id={num}' to download the prebuilt libmi.so from a CI run
# Supports the following tags:
#   windows: Sets up the domain controller only
#   linux: Sets up the Debian host
#   build_artifacts: Downloads the libmi from Azure DevOps run (requires '-e build_id' to be set)

- name: setup domain controller
  hosts: windows
  gather_facts: no
  vars:
    # Defines the HTTPS listeners to set up and metadata around the cert that backs it.
    # The ports used are every 2nd number from the base port, e.g. 29900, 299002, 29904, etc.
    # The default port (5986) is a self signed certificate that is not trusted at all.
    #   test: The test name to set as the friendly name prefix of the cert
    #   algorithm: The public key algorithm to use for the certificate (default: sha256)
    #   subject: Explicit subject to set for the certificate (default is the FQDN of the DC)
    #   self_signed: Whether the host is self signed or signed by a common CA (default: no)
    #   system_ca: Whether to sign it with the common system CA or use the explicit one (default: yes)
    certificate_base_port: 29900
    certificate_info:
    - test: cbt-sha1
      algorithm: sha1
    - test: cbt-sha256
      algorithm: sha256
    - test: cbt-sha256-pss
      algorithm: sha256-pss
    - test: cbt-sha384
      algorithm: sha384
    - test: cbt-sha512
      algorithm: sha512
    - test: cbt-sha512-pss
      algorithm: sha512-pss
    - test: verification
    - test: verification-bad-ca
      self_signed: yes
    - test: verification-bad-cn
      subject: fake-host
    - test: verification-other-ca
      system_ca: no
  tags:
  - windows

  tasks:
  - name: create cert output folder
    file:
      path: '{{ playbook_dir }}/cert_setup'
      state: directory
    delegate_to: localhost

  - name: create generate_cert script
    template:
      src: generate_cert.sh.tmpl
      dest: '{{ playbook_dir }}/cert_setup/generate_cert.sh'
      mode: '700'
    delegate_to: localhost

  - name: generate CA and WinRM certificates
    shell: ./generate_cert.sh {{ (inventory_hostname ~ "." ~ domain_name) | quote }} password
    args:
      creates: '{{ playbook_dir }}/cert_setup/complete.txt'
      chdir: '{{ playbook_dir }}/cert_setup'
    delegate_to: localhost

  - name: copy certificates to the Windows host
    win_copy:
      src: '{{ playbook_dir }}/cert_setup'
      dest: C:\Windows\TEMP\

  - name: import the WinRM certs to the certificate store
    win_certificate_store:
      path: C:\Windows\TEMP\cert_setup\{{ item.test }}.pfx
      key_exportable: no
      key_storage: machine
      password: password
      state: present
      store_location: LocalMachine
      store_name: My
    register: winrm_cert_info
    with_items: '{{ certificate_info }}'
    loop_control:
      label: '{{ item.test }}'

  # WinRM is frustratingly annoying to create an endpoint over multiple ports without having a separate adapter for
  # each listener so we just create a dummy loopback adapter for each one.
  - name: create dummy loopback adapters for WinRM endpoints
    win_device:
      path: '%WinDir%\Inf\netloop.inf'
      hardware_id: '*msloop'
      name: 'Microsoft KM-TEST Loopback Adapter{{ (item|int == 0) | ternary("", " #" ~ (item + 1)) }}'
      state: present
    register: loopback_adapters
    loop: '{{ range(0, certificate_info | length, 1) | list }}'
    loop_control:
      label: '{{ certificate_info[item|int].test }}'

  # The other annoying part is that the WinRM service checks that requests come from the registered address it is
  # meant to listen on. Because it is set to listen on a local loopback address we forward the external port for WinRM
  # to the internal port the listener is set to use. This means WinRM thinks the request came over that address when
  # it actually came from the normal external address.
  - name: setup WinRM listeners for each certificate and the friendly name of those certs
    win_shell: |
      $ErrorActionPreference = 'Stop'
      $changed = $false

      $basePort = {{ certificate_base_port }}
      $externalPort = $basePort + ({{ item|int }} * 2)
      $listenerPort = $externalPort + 1
      $desiredName = "test_{{ certificate_info[item|int].test }}_$externalPort"
      $thumbprint = '{{ winrm_cert_info.results[item|int].thumbprints[0] }}'
      $adapterName = '{{ loopback_adapters.results[item|int].name }}'

      # Set the friendly name of the cert so the libmi tests know what endpoints to test with.
      $cert = Get-Item -LiteralPath "Cert:\LocalMachine\My\$thumbprint"
      if ($cert.FriendlyName -ne $desiredName) {
          $cert.FriendlyName = $desiredName
          $changed = $true
      }

      # Get the IP address of the loopback adapter. The IP may not be ready yet if it was just created. Just sleep a
      # few times before trying again.
      $address = $null
      while ($true) {
          $address = Get-NetAdapter -InterfaceDescription $adapterName | Get-NetIPAddress | Where-Object AddressFamily -eq IPv4  
          if (-not $address.IPAddress) {
              Start-Sleep -Seconds 1
          } else {
              $address = $address.IPAddress
              break
          }
      }

      # See if the listener for the loopback adapter is already set.
      $listener = Get-ChildItem -Path WSMan:\localhost\Listener |
          Where-Object { $_.Keys -contains "Transport=HTTPS" } |
          ForEach-Object -Process {
              $details = Get-ChildItem -Path $_.PSPath
              [PSCustomObject]@{
                  PSPath = $_.PSPath
                  Address = ($details | Where-Object Name -eq Address).Value
                  Port = ($details | Where-Object Name -eq Port).Value
                  CertificateThumbprint = ($details | Where-Object Name -eq CertificateThumbprint).Value
              }
          } |
          Where-Object Port -eq $listenerPort

      # If the listener already exists but is for a different cert or IP then remove it.
      if ($listener -and ($listener.Address -ne ('IP:{0}' -f $address) -or $listener.CertificateThumbprint -ne $thumbprint)) {
          Remove-Item -LiteralPath $listener.PSPath -Force -Recurse
          $listener = $null
          $changed = $true
      }

      # Create the listener if required and forward the external port to the internal one.
      if (-not $listener) {
          $wsmanParams = @{
              ResourceURI = 'winrm/config/Listener'
              SelectorSet = @{
                  Address = ('IP:{0}' -f $address)
                  Transport = 'HTTPS'
              }
              ValueSet = @{
                  CertificateThumbprint = $thumbprint
                  Port = $listenerPort
              }
          }
          $null = New-WSManInstance @wsmanParams
          $null = netsh interface portproxy add v4tov4 listenaddress={{ ansible_host }} listenport=$externalPort connectaddress=$address connectport=$listenerPort

          $changed = $true
      }

      $changed
    register: winrm_listener_setup
    changed_when: winrm_listener_setup.stdout | trim | bool
    loop: '{{ range(0, certificate_info | length, 1) | list }}'
    loop_control:
      label: '{{ certificate_info[item|int] }}'

  - name: make sure the WinRM HTTPS listener ports are open
    win_firewall_rule:
      name: WinRM HTTPS ({{ certificate_info[item|int].test }}
      localport: '{{ certificate_base_port + (item|int * 2) }}'
      action: allow
      direction: in
      protocol: tcp
      profiles: domain,private,public
      state: present
      enabled: yes
    loop: '{{ range(0, certificate_info | length, 1) | list }}'
    loop_control:
      label: '{{ certificate_info[item|int].test }} - {{ certificate_base_port + (item|int * 2) }}'

  - name: make sure the CBT level is set to Strict
    win_shell: |
      $cbtPath = 'WSMan:\localhost\Service\Auth\CbtHardeningLevel'
      if ((Get-Item -LiteralPath $cbtPath).Value -ne 'Strict') {
          Set-Item -LiteralPath $cbtPath -Value Strict
          $true
      } else {
          $false
      }
    register: cbt_result
    changed_when: cbt_result.stdout | trim | bool

  - name: get network connection for private adapter
    win_shell: |
      foreach ($instance in (Get-CimInstance -ClassName Win32_NetworkAdapter -Filter "Netenabled='True'")) {
          $instance_config = Get-CimInstance -ClassName WIn32_NetworkAdapterConfiguration -Filter "Index = '$($instance.Index)'"
          if ($instance_config.IPAddress -contains "{{ ansible_host }}") {
              $instance.NetConnectionID
          }
      }
    changed_when: no
    register: network_connection_name_raw

  - name: fail if we didn't get a network connection name
    fail:
      msg: Failed to get the Windows network connection name
    when: network_connection_name_raw.stdout_lines | count != 1

  - name: set fact of network connection name
    set_fact:
      network_connection_name: '{{ network_connection_name_raw.stdout | trim }}'

  - name: set the DNS for the specified adapter to localhost
    win_dns_client:
      adapter_name: '{{ network_connection_name }}'
      ipv4_addresses: 127.0.0.1

  - name: ensure domain exists and DC is promoted as a domain controller
    win_domain:
      dns_domain_name: '{{ domain_name }}'
      safe_mode_password: '{{ domain_password }}'
    register: domain_setup_res

  - name: reboot DC if required after install
    win_reboot:
    when: domain_setup_res.reboot_required

  - name: create domain username
    win_domain_user:
      name: '{{ domain_username }}'
      upn: '{{ domain_upn }}'
      description: '{{ domain_username }} Domain Account'
      password: '{{ domain_password }}'
      password_never_expires: yes
      update_password: on_create
      groups:
      - Domain Admins
      state: present
    register: domain_user_result
    # ADWS may not be online after first reboot, need to keep on retrying
    retries: 30
    delay: 15
    until: domain_user_result is successful

  - name: test out domain user that was created
    win_whoami:
    register: become_res
    failed_when: become_res.upn != domain_upn
    become: yes
    become_method: runas
    vars:
      ansible_become_user: '{{ domain_upn }}'
      ansible_become_pass: '{{ domain_password }}'

- name: set up Linux test host
  hosts: linux
  gather_facts: no
  become: yes
  tags:
  - linux
  tasks:
  - name: update the apt package index
    apt:
      name: "*"
      state: latest
      update_cache: yes
      force_apt_get: yes

  - name: install base packages for Docker
    apt:
      name:
      - apt-transport-https
      - ca-certificates
      - curl
      - git
      - gnupg2
      - software-properties-common
      - unzip
      - wget
      force_apt_get: yes
      state: latest
      update_cache: yes

  - name: add Apt signing key from official docker repo
    apt_key:
      url: https://download.docker.com/linux/debian/gpg
      state: present

  - name: get the lsb_release for the current host
    command: lsb_release -cs
    register: lsb_release
    changed_when: no

  - name: add docker official repository for Debian
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/debian {{ lsb_release.stdout | trim }} stable
      state: present

  - name: index new repo into the cache
    apt:
      name: "*"
      state: latest
      update_cache: yes
      force_apt_get: yes

  - name: install docker
    apt:
      name: docker-ce
      state: present

  - name: configure the Docker service to start on boot
    service:
      name: docker
      enabled: yes
      state: started

  - name: add user to docker group
    user:
      name: vagrant
      append: yes
      groups: docker
      state: present

  - name: ensure the Windows domain controller is resolvable
    lineinfile:
      path: /etc/hosts
      line: '{{ hostvars["DC01"]["ansible_host"] }} dc01 dc01.{{ domain_name }}'
      state: present

  - name: Add DNS entries for resolvconf
    lineinfile:
      path: /etc/resolvconf/resolv.conf.d/head
      line: nameserver {{ item }}
      state: present
    loop:
    - '{{ hostvars["DC01"]["ansible_host"] }}'
    - 8.8.8.8
    register: dns_domain

  - name: resync resolvconf
    command: resolvconf -u
    when: dns_domain is changed

  - name: synchronize local omi to Debian host
    synchronize:
      src: ../../
      dest: ~/omi
      rsync_opts:
      - --exclude=.git
      - --exclude=integration_environment/.vagrant
    become: no

  - name: template krb5.conf template for tests
    template:
      src: krb5.conf.tmpl
      dest: ~/omi/krb5.conf
    become: no

  - name: download Azure DevOps build artifacts
    when: build_id is defined
    tags:
    - build_artifacts
    block:
    - name: get download info for Azure DevOps build artifacts
      uri:
        url: https://dev.azure.com/jborean93/jborean93/_apis/build/builds/{{ build_id }}/artifacts?api-version=4.1
        return_content: yes
      register: azure_artifacts

    - name: downloading azure DevOps build artifacts
      unarchive:
        src: '{{ azure_artifacts.json.value[item | int].resource.downloadUrl }}'
        dest: ~/omi/PSWSMan/lib
        remote_src: yes
      become: no
      when: azure_artifacts.json.value[item | int].name != 'PSWSMan'
      with_sequence: start=0 end={{ (azure_artifacts.json.count | int) - 1 }}
      loop_control:
        label: '{{ azure_artifacts.json.value[item | int].name }}'
